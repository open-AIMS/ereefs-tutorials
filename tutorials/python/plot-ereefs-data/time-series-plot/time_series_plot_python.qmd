---
title: "Plotting eReefs data"
subtitle: "Times series plots {{< fa brands python >}}"
---

:::{.tutorial-description}
Learn how to create time series plots of eReefs data in {{< fa brands python >}} python.
:::

In this notebook we use OPeNDAP to extract time series data at a single location of interest, then plot this
data. This extraction process can also be done with the
[AIMS eReefs data extraction tool](https://extraction.ereefs.aims.gov.au/). If you which to perform bigger
extractions then we recommend using this tool instead of this process outlined in this example.

> *Note*: This script has no error checking and so changing the date ranges or locations might result in out
  of bounds errors.

# Load the required Python libraries

```{python}
from netCDF4 import Dataset, num2date
import matplotlib.pyplot as plt
import cartopy
import cartopy.crs as ccrs
import os
import datetime
import pandas as pd
import numpy as np
cartopy.config['data_dir'] = os.getenv('CARTOPY_DIR', cartopy.config.get('data_dir'))
```

# Choose OPeNDAP end point

The first part of the process is to choose the OPeNDAP end point on the AIMS eReefs THREDDS server. You can
view the products in the
[AIMS eReefs THREDDS catalogue](https://thredds.ereefs.aims.gov.au/thredds/catalog/ereefs/gbr4_v2/catalog.html).
At this stage there is no grouped OPeNDAP service for the entire time series and so this script only works
for looking at a single month of data. Hopefully this can be improved in the future.

```{python}
# Connect to the OpeNDAP endpoint for the specified month.
month = 3
year = 2020
netCDF_datestr = str(year)+'-'+format(month, '02')
print(netCDF_datestr)
```

```{python}
# OPeNDAP URL to file "EREEFS_AIMS-CSIRO_gbr4_v2_hydro_daily-monthly-YYYY-MM.nc". Hydrodynamic 4km model, daily data for the month specified
inputFile = "https://thredds.ereefs.aims.gov.au/thredds/dodsC/ereefs/gbr4_v2/daily-monthly/EREEFS_AIMS-CSIRO_gbr4_v2_hydro_daily-monthly-"+netCDF_datestr+".nc"

nc_data = Dataset(inputFile, 'r')
print(nc_data.title)

# To find a list of the variables uncomment the next line:
print(repr(nc_data.variables))
```

# Select the point location
Work out the bounds of the gridded data. We can then use this to find out which grid cell best matches our
location of interest.

> *Note*: This only works because the AIMS eReefs aggregated datasets are regridded onto a regularly spaced
  grid. The original raw model data is on a curvilinear grid and this approach would not work for that data.

```{python}
lons = nc_data.variables['longitude'][:]
max_lon = max(lons)
min_lon = min(lons)
lats = nc_data.variables['latitude'][:]
max_lat = max(lats)
min_lat = min(lats)
grid_lon = lons.size
grid_lat = lats.size
print("Grid bounds, Lon: "+str(min_lon)+" - "+str(max_lon)+" Lat:"+str(min_lat)+" - "+str(max_lat))
print("Grid size is: "+str(grid_lon)+" x "+str(grid_lat))
```

Find the closest index to the location of interest.

```{python}
# Davies reef
lat = -18.82
lon = 147.64
selectedLatIndex = round((lat-min_lat)/(max_lat-min_lat)*grid_lat)
selectedLonIndex = round((lon-min_lon)/(max_lon-min_lon)*grid_lon)
print("Grid position of location: "+str(selectedLatIndex)+", "+str(selectedLonIndex))
```

# Extract values

Extract the values over time at this location. Note that because we are access the underlying data here this
results in an OPeNDAP call to get the data from the remote server. As a result this call can take a while
(~10 sec).

```{python}
selectedDepthIndex = 15 # -1.5m
selectedDepthIndex2 = 10 # -17.75m

# Time, Depth, Lat, Lon
dailyTemp1 = nc_data.variables['temp'][:,[selectedDepthIndex,selectedDepthIndex2], selectedLatIndex, selectedLonIndex]
print(dailyTemp1[0:5])
```

Let's get the wind for the same location. The wind variable doesn't have any depth dimension and so our
indexing into the data is different. The wind is a vector measurement, with an x and y component.

```{python}
wspeed_v = nc_data.variables['wspeed_v'][:, selectedLatIndex, selectedLonIndex]
wspeed_u = nc_data.variables['wspeed_v'][:, selectedLatIndex, selectedLonIndex]
```

To get the wind speed we need to calculate the magnitude of this vector.

```{python}
wspeed = np.sqrt(wspeed_v**2 + wspeed_u**2)
```

Get the time series. Note that the time values are stored as the number of days since 1990-01-01 00:00:00 +10.

```{python}
times = nc_data.variables['time'][:]
print(times[0:5])
```

# Plot the time series

```{python}
# Convert the days since the 1990 origin into Pandas dates for plotting
t = pd.to_datetime(times,unit='D',origin=pd.Timestamp('1990-01-01'))

fig, ax1 = plt.subplots()
fig.set_size_inches(8, 7)

ax1.set_xlabel('Date')
ax1.set_ylabel('Temperature (deg C)')
ax1.plot(t, dailyTemp1[:,0], color='tab:red', label='Temp (-1.5 m)')
ax1.plot(t, dailyTemp1[:,1], color='tab:orange', label='Temp (-17.75 m)')
#ax1.tick_params(axis='y', labelcolor=color)

ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

color = 'tab:blue'
ax2.set_ylabel('Wind speed (m/s)', color=color)  # we already handled the x-label with ax1
ax2.plot(t, wspeed, color=color, label='Wind')
ax2.tick_params(axis='y', labelcolor=color)

fig.legend()
# Set the axes formating to show the dates on an angle on the current figure (gcf)
plt.gcf().autofmt_xdate()

plt.show()
```

From this graph we can see that the surface water at Davies Reef was very warm during March 2020. There was
a strong stratification of the temperature profile with cool water at -18 m. Around the 10th March the wind
picked up for a few days, mixing the water, cooling the surface down rapidly.
