{
  "hash": "60079c431766e72e8fe0cd14fc88d697",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Accessing eReefs data from the AIMS server\"\nsubtitle: \"Basic access with OPeNDAP {{< fa brands r-project >}}\"\n---\n\n\n\n\n:::{.tutorial-description}\nLearn the basics of extracting eReefs data from the AIMS server with OPeNDAP in {{< fa brands r-project >}}.\n:::\n\nIn this tutorial we will look at how to access eReefs data directly from the\n[AIMS THREDDS server](https://thredds.ereefs.aims.gov.au/thredds/catalog/catalog.html) in R.\n\nThis server hosts aggregated eReefs model data in NetCDF file format and offers access to the data files via\nOPeNDAP, HTTP Server, and Web Map Service (WMS). While we could download the data files manually via the\nHTTPServer link, this approach is cumbersome when downloading multiple files, given their large size.\nThankfully, OPeNDAP provides a way to access the data files over the internet and extract only the data we\nwant.\n\nFor example, say we want the daily mean surface temperature at a single location for the last 30 days. If we\nwere to download the 30 individual daily aggregated NetCDF files, with each file ~ 350 Mb, this would require\nus to download over 10 Gb of data just to get 300 numbers. The vast majority of this data would be irrelevant\nto our needs as the NetCDF files contain data for a range of variables, at a range of depths, for many, many\nlocations. However, with OPeNDAP, we can extract the daily mean values directly from the server without\ndownloading any unneeded data.\n\n\n## Motivating problem\n\nWe will extract the daily mean water temperature for the 10th of December 2022 at 1.5 m depth  across the\nentire scope of the eReefs model. We will then save and plot this data. This example will introduce the\nbasics of how to connect to files on the server and extract the data we want.\n\n\n## Navigating the eReefs server\n\n*ADD: Info about the folder and file naming on the AIMS THREDDS Server.*\n\n\n## R packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RNetCDF) # working with netcdf files (incl. via OPeNDAP)\nlibrary(raster) # creating and manipuling rasters\n```\n:::\n\n\n\n\n:::{.callout-note appearance=\"simple\"}\nWhile the `ncdf4` package is commonly used to work with NetCDF files in R, it does not offer compatibility\nwith OPeNDAP for Windows (only Mac and Linux). For this reason we will use the `RNetCDF` package which offers\nsimilar functionality and Windows compatibility with OPeNDAP. Note that if you are using Mac or Linux and\nwish to use `ncdf4`, the functions used herein have obvious analogues; for example `ncdf4::nc_open()` vs.\n`RNetCDF::open.nc()`.\n:::\n\n\n## Connect to a file on the server\n\nFirst we need to find the right NetCDF file on the server. The available eReefs data NetCDF files are listed\nin the [AIMS THREDDS Server catalogue](https://thredds.ereefs.aims.gov.au/thredds/catalog/catalog.html). We\nwill navigate to the eReefs 4 km Hydrodynamic Model daily aggregated data for the month of December 2022 and\ncopy the OPeNDAP data URL.\n\n![](images/server_navigation.gif)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .code-overflow-wrap}\ninput_file <- \"https://thredds.ereefs.aims.gov.au/thredds/dodsC/ereefs/gbr4_v2/daily-monthly/EREEFS_AIMS-CSIRO_gbr4_v2_hydro_daily-monthly-2022-12.nc\"\n```\n:::\n\n\n\n\nWe can then open a connection to this file using the `RNetCDF::open.nc` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndailyAggDec22.nc <- open.nc(input_file)\n```\n:::\n\n\n\n\n::: {.callout-note appearance=\"simple\"}\nIf you wish to download NetCDF files from the server you can click the HTTPServer link instead of OPeNDAP.\nThe file can then be loaded into R by specifying the path: `open.nc(\"<path to downloaded file>\")`.\n:::\n\n## Print a file summary\n\nIf we wish to investigate the structure of the file we have connected to, including what variables and\ndimensions are available, we can print a summary.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary <- print.nc(dailyAggDec22.nc)\n```\n:::\n\n\n\n\n<details><summary><code>summary</code></summary>\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nnetcdf classic {\ndimensions:\n\ttime = UNLIMITED ; // (31 currently)\n\tk = 17 ;\n\tlatitude = 723 ;\n\tlongitude = 491 ;\nvariables:\n\tNC_FLOAT mean_cur(longitude, latitude, k, time) ;\n\t\tNC_CHAR mean_cur:puv__parameter = \"http://vocab.nerc.ac.uk/collection/P01/current/LCEWMP01/\" ;\n\t\tNC_CHAR mean_cur:coordinates = \"time zc latitude longitude\" ;\n\t\tNC_CHAR mean_cur:units = \"ms-1\" ;\n\t\tNC_CHAR mean_cur:short_name = \"mean_cur\" ;\n\t\tNC_CHAR mean_cur:aggregation = \"mean_speed\" ;\n\t\tNC_CHAR mean_cur:standard_name = \"mean_current_speed\" ;\n\t\tNC_CHAR mean_cur:long_name = \"mean_current_speed\" ;\n\t\tNC_INT mean_cur:_ChunkSizes = 1, 1, 133, 491 ;\n\tNC_FLOAT salt(longitude, latitude, k, time) ;\n\t\tNC_CHAR salt:qudt__unit = \"http://qudt.org/vocab/unit/PSU\" ;\n\t\tNC_CHAR salt:puv__parameter = \"http://vocab.nerc.ac.uk/collection/P01/current/PSLTMP01/\" ;\n\t\tNC_CHAR salt:coordinates = \"time zc latitude longitude\" ;\n\t\tNC_CHAR salt:short_name = \"salt\" ;\n\t\tNC_CHAR salt:aggregation = \"Daily\" ;\n\t\tNC_CHAR salt:units = \"PSU\" ;\n\t\tNC_CHAR salt:long_name = \"Salinity\" ;\n\t\tNC_INT salt:_ChunkSizes = 1, 1, 133, 491 ;\n\tNC_FLOAT temp(longitude, latitude, k, time) ;\n\t\tNC_CHAR temp:puv__parameter = \"https://vocab.nerc.ac.uk/collection/P01/current/TEMPMP01/\" ;\n\t\tNC_CHAR temp:coordinates = \"time zc latitude longitude\" ;\n\t\tNC_CHAR temp:short_name = \"temp\" ;\n\t\tNC_CHAR temp:aggregation = \"Daily\" ;\n\t\tNC_CHAR temp:units = \"degrees C\" ;\n\t\tNC_CHAR temp:long_name = \"Temperature\" ;\n\t\tNC_INT temp:_ChunkSizes = 1, 1, 133, 491 ;\n\tNC_FLOAT u(longitude, latitude, k, time) ;\n\t\tNC_CHAR u:vector_components = \"u v\" ;\n\t\tNC_CHAR u:puv__parameter = \"http://vocab.nerc.ac.uk/collection/P01/current/LCEWMP01/\" ;\n\t\tNC_CHAR u:coordinates = \"time zc latitude longitude\" ;\n\t\tNC_CHAR u:short_name = \"u\" ;\n\t\tNC_CHAR u:standard_name = \"eastward_sea_water_velocity\" ;\n\t\tNC_CHAR u:vector_name = \"Currents\" ;\n\t\tNC_CHAR u:aggregation = \"Daily\" ;\n\t\tNC_CHAR u:units = \"ms-1\" ;\n\t\tNC_CHAR u:long_name = \"Eastward current\" ;\n\t\tNC_INT u:_ChunkSizes = 1, 1, 133, 491 ;\n\tNC_FLOAT v(longitude, latitude, k, time) ;\n\t\tNC_CHAR v:vector_components = \"u v\" ;\n\t\tNC_CHAR v:puv__parameter = \"http://vocab.nerc.ac.uk/collection/P01/current/LCNSMP01/\" ;\n\t\tNC_CHAR v:coordinates = \"time zc latitude longitude\" ;\n\t\tNC_CHAR v:short_name = \"v\" ;\n\t\tNC_CHAR v:standard_name = \"northward_sea_water_velocity\" ;\n\t\tNC_CHAR v:vector_name = \"Currents\" ;\n\t\tNC_CHAR v:aggregation = \"Daily\" ;\n\t\tNC_CHAR v:units = \"ms-1\" ;\n\t\tNC_CHAR v:long_name = \"Northward current\" ;\n\t\tNC_INT v:_ChunkSizes = 1, 1, 133, 491 ;\n\tNC_DOUBLE zc(k) ;\n\t\tNC_CHAR zc:units = \"m\" ;\n\t\tNC_CHAR zc:positive = \"up\" ;\n\t\tNC_CHAR zc:long_name = \"Z coordinate\" ;\n\t\tNC_CHAR zc:axis = \"Z\" ;\n\t\tNC_CHAR zc:coordinate_type = \"Z\" ;\n\t\tNC_CHAR zc:_CoordinateAxisType = \"Height\" ;\n\t\tNC_CHAR zc:_CoordinateZisPositive = \"up\" ;\n\tNC_DOUBLE time(time) ;\n\t\tNC_CHAR time:units = \"days since 1990-01-01 00:00:00 +10\" ;\n\t\tNC_CHAR time:long_name = \"Time\" ;\n\t\tNC_CHAR time:standard_name = \"time\" ;\n\t\tNC_CHAR time:coordinate_type = \"time\" ;\n\t\tNC_CHAR time:puv__uom = \"http://vocab.nerc.ac.uk/collection/P06/current/UTAA/\" ;\n\t\tNC_CHAR time:calendar = \"gregorian\" ;\n\t\tNC_CHAR time:_CoordinateAxisType = \"Time\" ;\n\t\tNC_INT time:_ChunkSizes = 1024 ;\n\tNC_DOUBLE latitude(latitude) ;\n\t\tNC_CHAR latitude:units = \"degrees_north\" ;\n\t\tNC_CHAR latitude:long_name = \"Latitude\" ;\n\t\tNC_CHAR latitude:standard_name = \"latitude\" ;\n\t\tNC_CHAR latitude:coordinate_type = \"latitude\" ;\n\t\tNC_CHAR latitude:projection = \"geographic\" ;\n\t\tNC_CHAR latitude:puv__ofProperty = \"http://vocab.nerc.ac.uk/collection/S06/current/S0600045/\" ;\n\t\tNC_CHAR latitude:puv__uom = \"http://vocab.nerc.ac.uk/collection/P06/current/DEGN/\" ;\n\t\tNC_CHAR latitude:_CoordinateAxisType = \"Lat\" ;\n\tNC_DOUBLE longitude(longitude) ;\n\t\tNC_CHAR longitude:puv__uom = \"http://vocab.nerc.ac.uk/collection/P06/current/DEGE/\" ;\n\t\tNC_CHAR longitude:units = \"degrees_east\" ;\n\t\tNC_CHAR longitude:long_name = \"Longitude\" ;\n\t\tNC_CHAR longitude:standard_name = \"longitude\" ;\n\t\tNC_CHAR longitude:coordinate_type = \"longitude\" ;\n\t\tNC_CHAR longitude:projection = \"geographic\" ;\n\t\tNC_CHAR longitude:_CoordinateAxisType = \"Lon\" ;\n\tNC_FLOAT mean_wspeed(longitude, latitude, time) ;\n\t\tNC_CHAR mean_wspeed:puv__parameter = \"http://vocab.nerc.ac.uk/collection/P01/current/ESEWMPXX/\" ;\n\t\tNC_CHAR mean_wspeed:coordinates = \"time latitude longitude\" ;\n\t\tNC_CHAR mean_wspeed:units = \"ms-1\" ;\n\t\tNC_CHAR mean_wspeed:short_name = \"mean_wspeed\" ;\n\t\tNC_CHAR mean_wspeed:aggregation = \"mean_speed\" ;\n\t\tNC_CHAR mean_wspeed:standard_name = \"mean_wind_speed\" ;\n\t\tNC_CHAR mean_wspeed:long_name = \"mean_wind_speed\" ;\n\t\tNC_INT mean_wspeed:_ChunkSizes = 1, 133, 491 ;\n\tNC_FLOAT eta(longitude, latitude, time) ;\n\t\tNC_CHAR eta:puv__parameter = \"https://vocab.nerc.ac.uk/collection/P01/current/ASLVMP01/\" ;\n\t\tNC_CHAR eta:coordinates = \"time latitude longitude\" ;\n\t\tNC_CHAR eta:short_name = \"eta\" ;\n\t\tNC_CHAR eta:standard_name = \"sea_surface_height_above_geoid\" ;\n\t\tNC_CHAR eta:aggregation = \"Daily\" ;\n\t\tNC_CHAR eta:units = \"metre\" ;\n\t\tNC_CHAR eta:positive = \"up\" ;\n\t\tNC_CHAR eta:long_name = \"Surface elevation\" ;\n\t\tNC_INT eta:_ChunkSizes = 1, 133, 491 ;\n\tNC_FLOAT wspeed_u(longitude, latitude, time) ;\n\t\tNC_CHAR wspeed_u:puv__parameter = \"http://vocab.nerc.ac.uk/collection/P01/current/ESEWMPXX/\" ;\n\t\tNC_CHAR wspeed_u:coordinates = \"time latitude longitude\" ;\n\t\tNC_CHAR wspeed_u:short_name = \"wspeed_u\" ;\n\t\tNC_CHAR wspeed_u:aggregation = \"Daily\" ;\n\t\tNC_CHAR wspeed_u:units = \"ms-1\" ;\n\t\tNC_CHAR wspeed_u:long_name = \"eastward_wind\" ;\n\t\tNC_INT wspeed_u:_ChunkSizes = 1, 133, 491 ;\n\tNC_FLOAT wspeed_v(longitude, latitude, time) ;\n\t\tNC_CHAR wspeed_v:puv__parameter = \"http://vocab.nerc.ac.uk/collection/P01/current/ESNSMPXX/\" ;\n\t\tNC_CHAR wspeed_v:coordinates = \"time latitude longitude\" ;\n\t\tNC_CHAR wspeed_v:short_name = \"wspeed_v\" ;\n\t\tNC_CHAR wspeed_v:aggregation = \"Daily\" ;\n\t\tNC_CHAR wspeed_v:units = \"ms-1\" ;\n\t\tNC_CHAR wspeed_v:long_name = \"northward_wind\" ;\n\t\tNC_INT wspeed_v:_ChunkSizes = 1, 133, 491 ;\n\n// global attributes:\n\t\tNC_CHAR :Conventions = \"CF-1.0\" ;\n\t\tNC_CHAR :Parameter_File_Revision = \"$Revision: 1753 $\" ;\n\t\tNC_CHAR :Run_ID = \"2.1\" ;\n\t\tNC_CHAR :Run_code = \"GBR4 Hydro|G0.00|H2.10|S0.00|B0.00\" ;\n\t\tNC_CHAR :_CoordSysBuilder = \"ucar.nc2.dataset.conv.CF1Convention\" ;\n\t\tNC_CHAR :aims_ncaggregate_buildDate = \"2023-01-25T03:48:20+10:00\" ;\n\t\tNC_CHAR :aims_ncaggregate_datasetId = \"products__ncaggregate__ereefs__gbr4_v2__daily-monthly/EREEFS_AIMS-CSIRO_gbr4_v2_hydro_daily-monthly-2022-12\" ;\n\t\tNC_CHAR :aims_ncaggregate_firstDate = \"2022-12-01T00:00:00+10:00\" ;\n\t\tNC_CHAR :aims_ncaggregate_inputs = \"[products__ncaggregate__ereefs__gbr4_v2__raw/EREEFS_AIMS-CSIRO_gbr4_v2_hydro_raw_2022-12::MD5:bd27b033d40e598c20348044720deb73]\" ;\n\t\tNC_CHAR :aims_ncaggregate_lastDate = \"2022-12-31T00:00:00+10:00\" ;\n\t\tNC_CHAR :bald__isPrefixedBy = \"prefix_list\" ;\n\t\tNC_CHAR :date_created = \"Sun Dec 11 21:24:39 2022\" ;\n\t\tNC_CHAR :description = \"Aggregation of raw hourly input data (from eReefs AIMS-CSIRO GBR4 Hydrodynamic v2 subset) to daily means. Also calculates mean magnitude of wind and ocean current speeds. Data is regridded from curvilinear (per input data) to rectilinear via inverse weighted distance from up to 4 closest cells.\" ;\n\t\tNC_CHAR :ems_version = \"v1.4.0 rev(6949)\" ;\n\t\tNC_CHAR :history = \"2023-01-24T10:49:00+10:00: vendor: AIMS; processing: None summaries\n2023-01-25T03:48:20+10:00: vendor: AIMS; processing: Daily summaries\" ;\n\t\tNC_CHAR :metadata_link = \"https://eatlas.org.au/data/uuid/350aed53-ae0f-436e-9866-d34db7f04d2e\" ;\n\t\tNC_CHAR :paramfile = \"./prm/gbr4_hydro_nrt.prm\" ;\n\t\tNC_CHAR :paramhead = \"GBR 4km resolution grid\" ;\n\t\tNC_CHAR :prefix_list_puv__ = \"https://w3id.org/env/puv#\" ;\n\t\tNC_CHAR :prefix_list_qudt__ = \"http://qudt.org/vocab/unit/\" ;\n\t\tNC_CHAR :technical_guide_link = \"https://eatlas.org.au/pydio/public/aims-ereefs-platform-technical-guide-to-derived-products-from-csiro-ereefs-models-pdf\" ;\n\t\tNC_CHAR :technical_guide_publish_date = \"2020-08-18\" ;\n\t\tNC_CHAR :title = \"eReefs AIMS-CSIRO GBR4 Hydrodynamic v2 daily aggregation\" ;\n\t\tNC_CHAR :DODS_EXTRA.Unlimited_Dimension = \"time\" ;\n}\n```\n\n\n:::\n:::\n\n\n\n</details>\n\n\n## Extract data\n\nNow that we have an open connection to a file on the server we need to extract the daily mean temperature at\n1.5m depth for the 10th of December.\n\nFrom the `summary` output above we can see that the variable corresponding to temperature is:\n$\\texttt{ temp(longitude, latitude, k, time)}$.\n\nThe dimensions for temperature are in brackets. This means that there is a temperature value for every\ncombination of longitude, latitude, depth (k) and time. We can now see why these NetCDF files are so large.\n\nTo extract data from the file we will use the function\n\n`RNetCDF::var.get.nc(ncfile, variable, start=NA, count=NA, ...)`\n\nWe need to give the function:\n\n  * `ncfile`: a NetCDF file connection; in our case `dailyAggDec22.nc`.\n  * `variable`: the name or id of the data variable we wish to extract; in our case `\"temp\"`.\n  * `start`: a vector of indices of where to start getting data, one for each dimension of the variable. Since we have $\\texttt{temp(longitude, latitude, k, time)}$  we need to tell the function where to start getting data along each of the four dimensions.\n  * `count`: similar to start, but specifying the number of temperature values to extract along each dimension.\n\nLet's look at how to construct our `start` and `count` vectors.\n\n:::{.callout-note appearance=\"simple\"}\nThe default values of `start` and `count` are `NA`, in which case all data for the given `variable` will be\nextracted.\n:::\n\n**Depth**: Starting with depth is easy because we have a constant value of interest (1.5 m). The index `k`\ncorresponds to different depths as shown in the table below, where we see that for the 4km models `k=16` maps\nto a depth of 1.5 m.\n\n<details><summary>Table of eReefs depths corresponding to index `k`</summary>\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> Index k (R) </th>\n   <th style=\"text-align:right;\"> Index k (Python) </th>\n   <th style=\"text-align:right;\"> Hydrodynamic 1km model </th>\n   <th style=\"text-align:right;\"> Hydrodynamic &amp; BioGeoChemical 4km models </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 0 </td>\n   <td style=\"text-align:right;\"> -140.00 </td>\n   <td style=\"text-align:right;\"> -145.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 1 </td>\n   <td style=\"text-align:right;\"> -120.00 </td>\n   <td style=\"text-align:right;\"> -120.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 2 </td>\n   <td style=\"text-align:right;\"> -103.00 </td>\n   <td style=\"text-align:right;\"> -103.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 3 </td>\n   <td style=\"text-align:right;\"> -88.00 </td>\n   <td style=\"text-align:right;\"> -88.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 4 </td>\n   <td style=\"text-align:right;\"> -73.00 </td>\n   <td style=\"text-align:right;\"> -73.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 6 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 5 </td>\n   <td style=\"text-align:right;\"> -60.00 </td>\n   <td style=\"text-align:right;\"> -60.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 7 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 6 </td>\n   <td style=\"text-align:right;\"> -49.00 </td>\n   <td style=\"text-align:right;\"> -49.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 7 </td>\n   <td style=\"text-align:right;\"> -39.50 </td>\n   <td style=\"text-align:right;\"> -39.50 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 9 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 8 </td>\n   <td style=\"text-align:right;\"> -31.00 </td>\n   <td style=\"text-align:right;\"> -31.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 9 </td>\n   <td style=\"text-align:right;\"> -24.00 </td>\n   <td style=\"text-align:right;\"> -23.75 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 11 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 10 </td>\n   <td style=\"text-align:right;\"> -18.00 </td>\n   <td style=\"text-align:right;\"> -17.75 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 12 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 11 </td>\n   <td style=\"text-align:right;\"> -13.00 </td>\n   <td style=\"text-align:right;\"> -12.75 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 13 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 12 </td>\n   <td style=\"text-align:right;\"> -9.00 </td>\n   <td style=\"text-align:right;\"> -8.80 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 14 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 13 </td>\n   <td style=\"text-align:right;\"> -5.25 </td>\n   <td style=\"text-align:right;\"> -5.55 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 15 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 14 </td>\n   <td style=\"text-align:right;\"> -2.35 </td>\n   <td style=\"text-align:right;\"> -3.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 16 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 15 </td>\n   <td style=\"text-align:right;\"> -0.50 </td>\n   <td style=\"text-align:right;\"> -1.50 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 17 </td>\n   <td style=\"text-align:right;color: grey !important;\"> 16 </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> -0.50 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n</details>\n\n\n\n\n**Time**: Since we have the daily aggregated data for December 2022, and are interested only in a single day\n(the 10th), `time` is also a constant value. From the summary output we can see we have 31 time indexes,\nthese correspond to the day of the month, therefore we want `time=10`.\n\n**Longitude and latitude**: We want temperatures for every available longitude and latitude so we can plot\nthe data across the entire spatial range of the eReefs model. Therefore we want to start at index 1 and count\nfor the entire length of latitude and longitude. To get the lengths we could note the values from the summary\noutput, where we see $\\texttt{longitude = 491}$ and $\\texttt{latitude = 723}$. However we could also get the\nlengths programmatically.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlon <- var.get.nc(dailyAggDec22.nc, \"longitude\")\nlat <- var.get.nc(dailyAggDec22.nc, \"latitude\")\ndata.frame(length(lon), length(lat))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  length.lon. length.lat.\n1         491         723\n```\n\n\n:::\n:::\n\n\n\n\n:::{.callout-note appearance=\"simple\"}\nWithin the eReefs NetCDF files, the dimensions $\\texttt{longitude, latitude, k, time}$ have corresponding\nvariables `longitude`, `latitude`, `zc`, `time` (see summary output). Note that we would extract the\ndimension $\\texttt{k}$ variable with `var.get.nc(..., variable = \"zc\")`.\n:::\n\n\nNow we are ready to construct our `start` and `count` vectors and extract the data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# SETUP START AND COUNT VECTORS\n# Recall the order of the dimensions: (lon, lat, k , time)\n# We start at lon=1, lat=1, k=16, time=10 and get temps for\n# every lon and lat while holding depth and time constant\nlon_st <- 1\nlat_st <- 1\ndepth_st <- 16  # index k = 16 --> depth = 1.5 m\ntime_st <- 10   # index time = 10 --> 10th day of month\n\nlon_ct <- length(lon) # get temps for all lons and lats\nlat_ct <- length(lat)\ntime_ct <- 1  # Hold time and depth constant\ndepth_ct <- 1\n\nstart_vector <- c(lon_st, lat_st, depth_st, time_st)\ncount_vector <- c(lon_ct, lat_ct, time_ct, depth_ct)\n\n# EXTRACT DATA\ntemps_10Dec22_1p5m <- var.get.nc(\n  ncfile = dailyAggDec22.nc,\n  variable = \"temp\",\n  start = start_vector,\n  count = count_vector\n)\n\n# Get the size of our extracted data\ndims <- dim(temps_10Dec22_1p5m)\ndata.frame(nrows = dims[1], ncols = dims[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  nrows ncols\n1   491   723\n```\n\n\n:::\n:::\n\n\n\n\n\n## Close file connection\n\nNow that our extracted data is stored in memory, we should close the connection to the NetCDF file on the\nserver.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclose.nc(dailyAggDec22.nc)\n```\n:::\n\n\n\n\n\n## Save the data\n\nNow that we have our extracted data we may wish to save it for future use. To do this we first convert the\ndata from its current form as a matrix array into a raster, and then save the raster as a NetCDF file\n(GeoTIFF and other formats are also possible).\n\nWhen converting extracted eReefs data to rasters we need to apply the transpose `t()` and `flip()` functions\nin order to get the correct orientation.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemps_raster <- temps_10Dec22_1p5m |>\n  t() |>   # transpose temps matrix\n  raster(  # create raster\n    xmn = min(lon), xmx = max(lon),\n    ymn = min(lat), ymx = max(lat),\n    crs = CRS(\"+init=epsg:4326\")\n  ) |>\n  flip(direction = 'y') # flip the raster\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in CPL_crs_from_input(x): GDAL Message 1: +init=epsg:XXXX syntax is\ndeprecated. It might return a CRS with a non-EPSG compliant axis order.\n```\n\n\n:::\n\n```{.r .cell-code}\ntemps_raster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass      : RasterLayer \ndimensions : 723, 491, 354993  (nrow, ncol, ncell)\nresolution : 0.0299389, 0.02995851  (x, y)\nextent     : 142.1688, 156.8688, -28.69602, -7.036022  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nsource     : memory\nnames      : layer \nvalues     : 22.08588, 32.48817  (min, max)\n```\n\n\n:::\n:::\n\n\n\n\n\n:::{.callout-note appearance=\"simple\"}\nIn the code chunk above we used [pipes](https://r4ds.hadley.nz/workflow-pipes.html) `|>`. Pipes are very\nuseful when passing a dataset through a sequence of functions. In the code above we take our extracted temps,\ntranspose them, turn them into a raster, and then flip the raster. The final result is saved to\n`temps_raster`.\n:::\n\nNow we have our raster (in the correct orientation), saving it is easy.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save the raster file in the /data subdirectory\n# Note the '.nc' file extension since we are going to save as NetCDF\nsave_file <- \"data/ereefsDailyMeanWaterTemperature_10Dec2022_Depth1p5m.nc\"\n\nwriteRaster(\n  x = temps_raster, # what to save\n  filename = save_file, # where to save it\n  format = \"CDF\", # what format to save it as\n  overwrite = TRUE # whether to replace any existing file with the same name\n)\n```\n:::\n\n\n\n\n:::{.callout-note appearance=\"simple\"}\nThe `raster` package uses the `ncdf4` package to deal with NetCDF files. You can install this package by\nrunning `install.packages(\"ncdf4\")` from an R console.\n:::\n\nTo prove to ourselves that this worked, lets read the file back in and plot it.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read back in the saved NetCDF file as a raster\nsaved_temps <- raster(save_file)\n\n# Plot the data\nplot(saved_temps)\n```\n\n::: {.cell-output-display}\n![Extracted eReefs daily aggregated mean temperature at 1.5m depth for 10 December 2022.](basic_server_access_r_files/figure-html/fig-temps-plot-1.png){#fig-temps-plot width=672}\n:::\n:::\n\n\n\n\nHooray! We can now see our saved data plotted in @fig-temps-plot.\n",
    "supporting": [
      "basic_server_access_r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}