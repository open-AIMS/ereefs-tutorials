{
  "hash": "7df4224f294c47edf1ab1b43d1c9c362",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Plotting eReefs data\"\nsubtitle: \"Times series plots {{< fa brands python >}}\"\n---\n\n\n:::{.tutorial-description}\nLearn how to create time series plots of eReefs data in {{< fa brands python >}} python.\n:::\n\nIn this notebook we use OpeNDAP to extract time series data at a single location of interest, then plot this data. This extraction process can also be done with the [AIMS eReefs data extraction tool](https://extraction.ereefs.aims.gov.au/). If you which to perform bigger extractions then we recommend using this tool instead of this process outlined in this example.\n\n> *Note*: This script has no error checking and so changing the date ranges or locations might result in out of bounds errors.\n\n# Load the required Python libraries\n\n::: {#fc4795d4 .cell execution_count=1}\n``` {.python .cell-code}\nfrom netCDF4 import Dataset, num2date\nimport matplotlib.pyplot as plt\nimport cartopy\nimport cartopy.crs as ccrs\nimport os\nimport datetime\nimport pandas as pd\nimport numpy as np\ncartopy.config['data_dir'] = os.getenv('CARTOPY_DIR', cartopy.config.get('data_dir'))\n```\n:::\n\n\n# Choose OPeNDAP end point\n\nThe first part of the process is to choose the OPeNDAP end point on the AIMS eReefs THREDDS server. You can view the products in the [AIMS eReefs THREDDS catalogue](https://thredds.ereefs.aims.gov.au/thredds/catalog/ereefs/gbr4_v2/catalog.html). At this stage there is no grouped OPeNDAP service for the entire time series and so this script only works for looking at a single month of data. Hopefully this can be improved in the future.\n\n::: {#2bcb50e1 .cell execution_count=2}\n``` {.python .cell-code}\n# Connect to the OpeNDAP endpoint for the specified month.\nmonth = 3\nyear = 2020\nnetCDF_datestr = str(year)+'-'+format(month, '02')\nnetCDF_datestr\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'2020-03'\n```\n:::\n:::\n\n\n::: {#18f712f7 .cell execution_count=3}\n``` {.python .cell-code}\n# OPeNDAP URL to file \"EREEFS_AIMS-CSIRO_gbr4_v2_hydro_daily-monthly-YYYY-MM.nc\". Hydrodynamic 4km model, daily data for the month specified\ninputFile = \"https://thredds.ereefs.aims.gov.au/thredds/dodsC/ereefs/gbr4_v2/daily-monthly/EREEFS_AIMS-CSIRO_gbr4_v2_hydro_daily-monthly-\"+netCDF_datestr+\".nc\"\n\nnc_data = Dataset(inputFile, 'r')\nprint(nc_data.title)\n\n# To find a list of the variables uncomment the next line:\nnc_data.variables\n```\n\n::: {.cell-output .cell-output-stdout}\n```\neReefs AIMS-CSIRO GBR4 Hydrodynamic v2 daily aggregation\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n{'mean_cur': <class 'netCDF4._netCDF4.Variable'>\n float32 mean_cur(time, k, latitude, longitude)\n     coordinates: time zc latitude longitude\n     substanceOrTaxon_id: http://environment.data.gov.au/def/feature/ocean_current\n     units: ms-1\n     puv__parameter: http://vocab.nerc.ac.uk/collection/P01/current/LCEWMP01/\n     medium_id: http://environment.data.gov.au/def/feature/ocean\n     unit_id: http://qudt.org/vocab/unit#MeterPerSecond\n     short_name: mean_cur\n     aggregation: mean_speed\n     standard_name: mean_current_speed\n     long_name: mean_current_speed\n     _ChunkSizes: [  1   1 133 491]\n unlimited dimensions: time\n current shape = (31, 17, 723, 491)\n filling off,\n 'salt': <class 'netCDF4._netCDF4.Variable'>\n float32 salt(time, k, latitude, longitude)\n     qudt__unit: http://qudt.org/vocab/unit/PSU\n     puv__parameter: http://vocab.nerc.ac.uk/collection/P01/current/PSLTMP01/\n     coordinates: time zc latitude longitude\n     substanceOrTaxon_id: http://sweet.jpl.nasa.gov/2.2/matrWater.owl#SaltWater\n     scaledQuantityKind_id: http://environment.data.gov.au/def/property/practical_salinity\n     short_name: salt\n     aggregation: Daily\n     units: PSU\n     medium_id: http://environment.data.gov.au/def/feature/ocean\n     unit_id: http://environment.data.gov.au/water/quality/def/unit/PSU\n     long_name: Salinity\n     _ChunkSizes: [  1   1 133 491]\n unlimited dimensions: time\n current shape = (31, 17, 723, 491)\n filling off,\n 'temp': <class 'netCDF4._netCDF4.Variable'>\n float32 temp(time, k, latitude, longitude)\n     puv__parameter: https://vocab.nerc.ac.uk/collection/P01/current/TEMPMP01/\n     coordinates: time zc latitude longitude\n     substanceOrTaxon_id: http://sweet.jpl.nasa.gov/2.2/matrWater.owl#SaltWater\n     scaledQuantityKind_id: http://environment.data.gov.au/def/property/sea_water_temperature\n     short_name: temp\n     aggregation: Daily\n     units: degrees C\n     medium_id: http://environment.data.gov.au/def/feature/ocean\n     unit_id: http://qudt.org/vocab/unit#DegreeCelsius\n     long_name: Temperature\n     _ChunkSizes: [  1   1 133 491]\n unlimited dimensions: time\n current shape = (31, 17, 723, 491)\n filling off,\n 'u': <class 'netCDF4._netCDF4.Variable'>\n float32 u(time, k, latitude, longitude)\n     vector_components: u v\n     coordinates: time zc latitude longitude\n     substanceOrTaxon_id: http://environment.data.gov.au/def/feature/ocean_current\n     vector_name: Currents\n     aggregation: Daily\n     units: ms-1\n     long_name: Eastward current\n     puv__parameter: http://vocab.nerc.ac.uk/collection/P01/current/LCEWMP01/\n     scaledQuantityKind_id: http://environment.data.gov.au/def/property/sea_water_velocity_eastward\n     short_name: u\n     standard_name: eastward_sea_water_velocity\n     medium_id: http://environment.data.gov.au/def/feature/ocean\n     unit_id: http://qudt.org/vocab/unit#MeterPerSecond\n     _ChunkSizes: [  1   1 133 491]\n unlimited dimensions: time\n current shape = (31, 17, 723, 491)\n filling off,\n 'v': <class 'netCDF4._netCDF4.Variable'>\n float32 v(time, k, latitude, longitude)\n     vector_components: u v\n     coordinates: time zc latitude longitude\n     substanceOrTaxon_id: http://environment.data.gov.au/def/feature/ocean_current\n     vector_name: Currents\n     aggregation: Daily\n     units: ms-1\n     long_name: Northward current\n     puv__parameter: http://vocab.nerc.ac.uk/collection/P01/current/LCNSMP01/\n     scaledQuantityKind_id: http://environment.data.gov.au/def/property/sea_water_velocity_northward\n     short_name: v\n     standard_name: northward_sea_water_velocity\n     medium_id: http://environment.data.gov.au/def/feature/ocean\n     unit_id: http://qudt.org/vocab/unit#MeterPerSecond\n     _ChunkSizes: [  1   1 133 491]\n unlimited dimensions: time\n current shape = (31, 17, 723, 491)\n filling off,\n 'zc': <class 'netCDF4._netCDF4.Variable'>\n float64 zc(k)\n     positive: up\n     coordinate_type: Z\n     units: m\n     long_name: Z coordinate\n     axis: Z\n     _CoordinateAxisType: Height\n     _CoordinateZisPositive: up\n unlimited dimensions: \n current shape = (17,)\n filling off,\n 'time': <class 'netCDF4._netCDF4.Variable'>\n float64 time(time)\n     units: days since 1990-01-01 00:00:00 +10\n     long_name: Time\n     standard_name: time\n     coordinate_type: time\n     puv__uom: http://vocab.nerc.ac.uk/collection/P06/current/UTAA/\n     calendar: gregorian\n     _CoordinateAxisType: Time\n     _ChunkSizes: 1024\n unlimited dimensions: time\n current shape = (31,)\n filling off,\n 'latitude': <class 'netCDF4._netCDF4.Variable'>\n float64 latitude(latitude)\n     long_name: Latitude\n     standard_name: latitude\n     units: degrees_north\n     coordinate_type: latitude\n     projection: geographic\n     puv__ofProperty: http://vocab.nerc.ac.uk/collection/S06/current/S0600045/\n     puv__uom: http://vocab.nerc.ac.uk/collection/P06/current/DEGN/\n     _CoordinateAxisType: Lat\n unlimited dimensions: \n current shape = (723,)\n filling off,\n 'longitude': <class 'netCDF4._netCDF4.Variable'>\n float64 longitude(longitude)\n     standard_name: longitude\n     long_name: Longitude\n     units: degrees_east\n     puv__uom: http://vocab.nerc.ac.uk/collection/P06/current/DEGE/\n     coordinate_type: longitude\n     projection: geographic\n     _CoordinateAxisType: Lon\n unlimited dimensions: \n current shape = (491,)\n filling off,\n 'mean_wspeed': <class 'netCDF4._netCDF4.Variable'>\n float32 mean_wspeed(time, latitude, longitude)\n     puv__parameter: http://vocab.nerc.ac.uk/collection/P01/current/ESEWMPXX/\n     coordinates: time latitude longitude\n     units: ms-1\n     short_name: mean_wspeed\n     aggregation: mean_speed\n     standard_name: mean_wind_speed\n     long_name: mean_wind_speed\n     _ChunkSizes: [  1 133 491]\n unlimited dimensions: time\n current shape = (31, 723, 491)\n filling off,\n 'eta': <class 'netCDF4._netCDF4.Variable'>\n float32 eta(time, latitude, longitude)\n     puv__parameter: https://vocab.nerc.ac.uk/collection/P01/current/ASLVMP01/\n     coordinates: time latitude longitude\n     substanceOrTaxon_id: http://environment.data.gov.au/def/feature/ocean_near_surface\n     scaledQuantityKind_id: http://environment.data.gov.au/def/property/sea_surface_elevation\n     short_name: eta\n     standard_name: sea_surface_height_above_sea_level\n     aggregation: Daily\n     units: metre\n     positive: up\n     medium_id: http://environment.data.gov.au/def/feature/ocean\n     unit_id: http://qudt.org/vocab/unit#Meter\n     long_name: Surface elevation\n     _ChunkSizes: [  1 133 491]\n unlimited dimensions: time\n current shape = (31, 723, 491)\n filling off,\n 'wspeed_u': <class 'netCDF4._netCDF4.Variable'>\n float32 wspeed_u(time, latitude, longitude)\n     puv__parameter: http://vocab.nerc.ac.uk/collection/P01/current/ESEWMPXX/\n     coordinates: time latitude longitude\n     short_name: wspeed_u\n     aggregation: Daily\n     units: ms-1\n     long_name: eastward_wind\n     _ChunkSizes: [  1 133 491]\n unlimited dimensions: time\n current shape = (31, 723, 491)\n filling off,\n 'wspeed_v': <class 'netCDF4._netCDF4.Variable'>\n float32 wspeed_v(time, latitude, longitude)\n     puv__parameter: http://vocab.nerc.ac.uk/collection/P01/current/ESNSMPXX/\n     coordinates: time latitude longitude\n     short_name: wspeed_v\n     aggregation: Daily\n     units: ms-1\n     long_name: northward_wind\n     _ChunkSizes: [  1 133 491]\n unlimited dimensions: time\n current shape = (31, 723, 491)\n filling off}\n```\n:::\n:::\n\n\n# Select the point location\nWork out the bounds of the gridded data. We can then use this to find out which grid cell best matches our location of interest.\n\n> *Note*: This only works because the AIMS eReefs aggregated datasets are regridded onto a regularly spaced grid. The original raw model data is on a curvilinear grid and this approach would not work for that data.\n\n::: {#2f6b3157 .cell execution_count=4}\n``` {.python .cell-code}\nlons = nc_data.variables['longitude'][:]\nmax_lon = max(lons)\nmin_lon = min(lons)\nlats = nc_data.variables['latitude'][:]\nmax_lat = max(lats)\nmin_lat = min(lats)\ngrid_lon = lons.size\ngrid_lat = lats.size\nprint(\"Grid bounds, Lon: \"+str(min_lon)+\" - \"+str(max_lon)+\" Lat:\"+str(min_lat)+\" - \"+str(max_lat))\nprint(\"Grid size is: \"+str(grid_lon)+\" x \"+str(grid_lat))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGrid bounds, Lon: 142.168788 - 156.868788 Lat:-28.696022 - -7.036022\nGrid size is: 491 x 723\n```\n:::\n:::\n\n\nFind the closest index to the location of interest.\n\n::: {#3b31a027 .cell execution_count=5}\n``` {.python .cell-code}\n# Davies reef\nlat = -18.82\nlon = 147.64\nselectedLatIndex = round((lat-min_lat)/(max_lat-min_lat)*grid_lat)\nselectedLonIndex = round((lon-min_lon)/(max_lon-min_lon)*grid_lon)\nprint(\"Grid position of location: \"+str(selectedLatIndex)+\", \"+str(selectedLonIndex))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGrid position of location: 330, 183\n```\n:::\n:::\n\n\n# Extract values\n\nExtract the values over time at this location. Note that because we are access the underlying data here this results in an OpeNDAP call to get the data from the remote server. As a result this call can take a while (~10 sec).\n\n::: {#8cec2f54 .cell execution_count=6}\n``` {.python .cell-code}\nselectedDepthIndex = 15 # -1.5m\nselectedDepthIndex2 = 10 # -17.75m\n\n# Time, Depth, Lat, Lon\ndailyTemp1 = nc_data.variables['temp'][:,[selectedDepthIndex,selectedDepthIndex2], selectedLatIndex, selectedLonIndex]\nprint(dailyTemp1[0:5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[29.586527 27.764503]\n [29.513176 27.867159]\n [29.505758 28.179167]\n [29.782936 28.216429]\n [30.008278 28.062304]]\n```\n:::\n:::\n\n\nLet's get the wind for the same location. The wind variable doesn't have any depth dimension and so our indexing into the data is different. The wind is a vector measurement, with an x and y component.\n\n::: {#71938357 .cell execution_count=7}\n``` {.python .cell-code}\nwspeed_v = nc_data.variables['wspeed_v'][:, selectedLatIndex, selectedLonIndex]\nwspeed_u = nc_data.variables['wspeed_v'][:, selectedLatIndex, selectedLonIndex]\n```\n:::\n\n\nTo get the wind speed we need to calculate the magnitude of this vector.\n\n::: {#d4caace2 .cell execution_count=8}\n``` {.python .cell-code}\nwspeed = np.sqrt(wspeed_v**2 + wspeed_u**2)\n```\n:::\n\n\nGet the time series. Note that the time values are stored as the number of days since 1990-01-01 00:00:00 +10.\n\n::: {#a7975b87 .cell execution_count=9}\n``` {.python .cell-code}\ntimes = nc_data.variables['time'][:]\nprint(times[0:5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[11017. 11018. 11019. 11020. 11021.]\n```\n:::\n:::\n\n\n# Plot the time series\n\n::: {#b1af203e .cell execution_count=10}\n``` {.python .cell-code}\n# Convert the days since the 1990 origin into Pandas dates for plotting\nt = pd.to_datetime(times,unit='D',origin=pd.Timestamp('1990-01-01'))\n\nfig, ax1 = plt.subplots()\nfig.set_size_inches(8, 7)\n\n\nax1.set_xlabel('Date')\nax1.set_ylabel('Temperature (deg C)')\nax1.plot(t, dailyTemp1[:,0], color='tab:red', label='Temp (-1.5 m)')\nax1.plot(t, dailyTemp1[:,1], color='tab:orange', label='Temp (-17.75 m)')\n#ax1.tick_params(axis='y', labelcolor=color)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n\ncolor = 'tab:blue'\nax2.set_ylabel('Wind speed (m/s)', color=color)  # we already handled the x-label with ax1\nax2.plot(t, wspeed, color=color, label='Wind')\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.legend()\n# Set the axes formating to show the dates on an angle on the current figure (gcf)\nplt.gcf().autofmt_xdate()\n\n#fig.tight_layout()  # otherwise the right y-label is slightly clipped\n```\n\n::: {.cell-output .cell-output-display}\n![](time_series_plot_python_files/figure-html/cell-11-output-1.png){width=749 height=628}\n:::\n:::\n\n\nFrom this graph we can see that the surface water at Davies Reef was very warm during March 2020. There was a strong stratification of the temperature profile with cool water at -18 m. Around the 10th March the wind picked up for a few days, mixing the water, cooling the surface down rapidly.\n\n",
    "supporting": [
      "time_series_plot_python_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}