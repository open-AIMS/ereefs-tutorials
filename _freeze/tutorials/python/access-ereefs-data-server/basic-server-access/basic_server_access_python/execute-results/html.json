{
  "hash": "78354ceb4f260ef3361cd7e53d361747",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Accessing eReefs data from the AIMS eReefs THREDDS server\"\nsubtitle: \"Basic access with OPeNDAP {{< fa brands python >}}\"\n---\n\n\n\n\n:::{.tutorial-description}\nLearn the basics of extracting eReefs data from the AIMS eReefs THREDDS server with OPeNDAP in Python\n{{< fa brands python >}}.\n:::\n\nIn this tutorial we will look at how to access eReefs data directly from the\n[AIMS eReefs THREDDS server](https://thredds.ereefs.aims.gov.au/thredds/catalog/catalog.html) in python.\n\nThis server hosts aggregated eReefs model data in NetCDF file format and offers access to the data files via\nOPeNDAP, HTTP Server, and Web Map Service (WMS). While we could download the data files manually via the\nHTTPServer link, this approach is cumbersome when downloading multiple files, given their large size.\nThankfully, OPeNDAP provides a way to access the data files over the internet and extract only the data we\nwant.\n\nFor example, say we want the daily mean surface temperature at a single location for the last 30 days. If we\nwere to download the 30 individual daily aggregated NetCDF files, with each file ~ 350 Mb, this would require\nus to download over 10 Gb of data just to get 300 numbers. The vast majority of this data would be irrelevant\nto our needs as the NetCDF files contain data for a range of variables, at a range of depths, for many, many\nlocations. However, with OPeNDAP, we can extract the daily mean values directly from the server without\ndownloading any unneeded data.\n\n\n## Motivating problem\n\nWe will extract the daily mean water temperature for the 10th of December 2022 at 1.5 m depth  across the\nentire scope of the eReefs model. We will then plot this data. This example will introduce the basics of how\nto connect to files on the server and extract the data we want.\n\n\n## Navigating the eReefs server\n\n*ADD: Info about the folder and file naming on the AIMS eReefs THREDDS Server.*\n\n\n## Python libraries\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom netCDF4 import Dataset, num2date\nimport matplotlib.pyplot as plt\nimport cartopy\nimport cartopy.crs as ccrs\nimport os\ncartopy.config['data_dir'] = os.getenv('CARTOPY_DIR', cartopy.config.get('data_dir'))\n```\n:::\n\n\n\n\n\n## Connect to a file on the server\n\nFirst we need to find the right NetCDF file on the server. The available eReefs\ndata NetCDF files are listed in the\n[AIMS eReefs THREDDS catalogue](https://thredds.ereefs.aims.gov.au/thredds/catalog/catalog.html). We\nwill navigate to the eReefs 4 km Hydrodynamic Model daily aggregated data for\nthe month of December 2022 and copy the OPeNDAP data URL.\n\n![](images/server_navigation.gif)\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code .code-overflow-wrap}\ninput_file = \"https://thredds.ereefs.aims.gov.au/thredds/dodsC/ereefs/gbr4_v2/daily-monthly/EREEFS_AIMS-CSIRO_gbr4_v2_hydro_daily-monthly-2022-12.nc\"\n```\n:::\n\n\n\n\nWe can then open a connection to this file using the `Dataset` function from the `netCDF4` library.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndailyAggDec22_nc = Dataset(input_file)\n```\n:::\n\n\n\n\n::: {.callout-note appearance=\"simple\"}\nIf you wish to download NetCDF files from the server you can click the HTTPServer link instead of OPeNDAP.\nThe file can then be loaded into python by specifying the path: `Dataset(\"<path to downloaded file>\")`.\n:::\n\n\n## Examine file structure\n\nIf we wish to look at the structure of the file we have connected to, including what variables and dimensions\nare available, we access the various attributes below.\n\n\n<details><summary><code>dailyAggDec22_nc.title</code></summary>\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n'eReefs AIMS-CSIRO GBR4 Hydrodynamic v2 daily aggregation'\n```\n\n\n:::\n:::\n\n\n\n</details>\n\n<details><summary><code>dailyAggDec22_nc.description</code></summary>\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n'Aggregation of raw hourly input data (from eReefs AIMS-CSIRO GBR4 Hydrodynamic v2 subset) to daily means. Also calculates mean magnitude of wind and ocean current speeds. Data is regridded from curvilinear (per input data) to rectilinear via inverse weighted distance from up to 4 closest cells.'\n```\n\n\n:::\n:::\n\n\n\n</details>\n\n<details><summary><code>dailyAggDec22_nc.dimensions</code></summary>\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n{'time': <class 'netCDF4._netCDF4.Dimension'> (unlimited): name = 'time', size = 31, 'k': <class 'netCDF4._netCDF4.Dimension'>: name = 'k', size = 17, 'latitude': <class 'netCDF4._netCDF4.Dimension'>: name = 'latitude', size = 723, 'longitude': <class 'netCDF4._netCDF4.Dimension'>: name = 'longitude', size = 491}\n```\n\n\n:::\n:::\n\n\n\n</details>\n\n<details><summary><code>dailyAggDec22_nc.variables</code></summary>\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n{'mean_cur': <class 'netCDF4._netCDF4.Variable'>\nfloat32 mean_cur(time, k, latitude, longitude)\n    puv__parameter: http://vocab.nerc.ac.uk/collection/P01/current/LCEWMP01/\n    coordinates: time zc latitude longitude\n    units: ms-1\n    short_name: mean_cur\n    aggregation: mean_speed\n    standard_name: mean_current_speed\n    long_name: mean_current_speed\n    _ChunkSizes: [  1   1 133 491]\nunlimited dimensions: time\ncurrent shape = (31, 17, 723, 491)\nfilling off, 'salt': <class 'netCDF4._netCDF4.Variable'>\nfloat32 salt(time, k, latitude, longitude)\n    qudt__unit: http://qudt.org/vocab/unit/PSU\n    puv__parameter: http://vocab.nerc.ac.uk/collection/P01/current/PSLTMP01/\n    coordinates: time zc latitude longitude\n    short_name: salt\n    aggregation: Daily\n    units: PSU\n    long_name: Salinity\n    _ChunkSizes: [  1   1 133 491]\nunlimited dimensions: time\ncurrent shape = (31, 17, 723, 491)\nfilling off, 'temp': <class 'netCDF4._netCDF4.Variable'>\nfloat32 temp(time, k, latitude, longitude)\n    puv__parameter: https://vocab.nerc.ac.uk/collection/P01/current/TEMPMP01/\n    coordinates: time zc latitude longitude\n    short_name: temp\n    aggregation: Daily\n    units: degrees C\n    long_name: Temperature\n    _ChunkSizes: [  1   1 133 491]\nunlimited dimensions: time\ncurrent shape = (31, 17, 723, 491)\nfilling off, 'u': <class 'netCDF4._netCDF4.Variable'>\nfloat32 u(time, k, latitude, longitude)\n    vector_components: u v\n    puv__parameter: http://vocab.nerc.ac.uk/collection/P01/current/LCEWMP01/\n    coordinates: time zc latitude longitude\n    short_name: u\n    standard_name: eastward_sea_water_velocity\n    vector_name: Currents\n    aggregation: Daily\n    units: ms-1\n    long_name: Eastward current\n    _ChunkSizes: [  1   1 133 491]\nunlimited dimensions: time\ncurrent shape = (31, 17, 723, 491)\nfilling off, 'v': <class 'netCDF4._netCDF4.Variable'>\nfloat32 v(time, k, latitude, longitude)\n    vector_components: u v\n    puv__parameter: http://vocab.nerc.ac.uk/collection/P01/current/LCNSMP01/\n    coordinates: time zc latitude longitude\n    short_name: v\n    standard_name: northward_sea_water_velocity\n    vector_name: Currents\n    aggregation: Daily\n    units: ms-1\n    long_name: Northward current\n    _ChunkSizes: [  1   1 133 491]\nunlimited dimensions: time\ncurrent shape = (31, 17, 723, 491)\nfilling off, 'zc': <class 'netCDF4._netCDF4.Variable'>\nfloat64 zc(k)\n    units: m\n    positive: up\n    long_name: Z coordinate\n    axis: Z\n    coordinate_type: Z\n    _CoordinateAxisType: Height\n    _CoordinateZisPositive: up\nunlimited dimensions: \ncurrent shape = (17,)\nfilling off, 'time': <class 'netCDF4._netCDF4.Variable'>\nfloat64 time(time)\n    units: days since 1990-01-01 00:00:00 +10\n    long_name: Time\n    standard_name: time\n    coordinate_type: time\n    puv__uom: http://vocab.nerc.ac.uk/collection/P06/current/UTAA/\n    calendar: gregorian\n    _CoordinateAxisType: Time\n    _ChunkSizes: 1024\nunlimited dimensions: time\ncurrent shape = (31,)\nfilling off, 'latitude': <class 'netCDF4._netCDF4.Variable'>\nfloat64 latitude(latitude)\n    units: degrees_north\n    long_name: Latitude\n    standard_name: latitude\n    coordinate_type: latitude\n    projection: geographic\n    puv__ofProperty: http://vocab.nerc.ac.uk/collection/S06/current/S0600045/\n    puv__uom: http://vocab.nerc.ac.uk/collection/P06/current/DEGN/\n    _CoordinateAxisType: Lat\nunlimited dimensions: \ncurrent shape = (723,)\nfilling off, 'longitude': <class 'netCDF4._netCDF4.Variable'>\nfloat64 longitude(longitude)\n    puv__uom: http://vocab.nerc.ac.uk/collection/P06/current/DEGE/\n    units: degrees_east\n    long_name: Longitude\n    standard_name: longitude\n    coordinate_type: longitude\n    projection: geographic\n    _CoordinateAxisType: Lon\nunlimited dimensions: \ncurrent shape = (491,)\nfilling off, 'mean_wspeed': <class 'netCDF4._netCDF4.Variable'>\nfloat32 mean_wspeed(time, latitude, longitude)\n    puv__parameter: http://vocab.nerc.ac.uk/collection/P01/current/ESEWMPXX/\n    coordinates: time latitude longitude\n    units: ms-1\n    short_name: mean_wspeed\n    aggregation: mean_speed\n    standard_name: mean_wind_speed\n    long_name: mean_wind_speed\n    _ChunkSizes: [  1 133 491]\nunlimited dimensions: time\ncurrent shape = (31, 723, 491)\nfilling off, 'eta': <class 'netCDF4._netCDF4.Variable'>\nfloat32 eta(time, latitude, longitude)\n    puv__parameter: https://vocab.nerc.ac.uk/collection/P01/current/ASLVMP01/\n    coordinates: time latitude longitude\n    short_name: eta\n    standard_name: sea_surface_height_above_geoid\n    aggregation: Daily\n    units: metre\n    positive: up\n    long_name: Surface elevation\n    _ChunkSizes: [  1 133 491]\nunlimited dimensions: time\ncurrent shape = (31, 723, 491)\nfilling off, 'wspeed_u': <class 'netCDF4._netCDF4.Variable'>\nfloat32 wspeed_u(time, latitude, longitude)\n    puv__parameter: http://vocab.nerc.ac.uk/collection/P01/current/ESEWMPXX/\n    coordinates: time latitude longitude\n    short_name: wspeed_u\n    aggregation: Daily\n    units: ms-1\n    long_name: eastward_wind\n    _ChunkSizes: [  1 133 491]\nunlimited dimensions: time\ncurrent shape = (31, 723, 491)\nfilling off, 'wspeed_v': <class 'netCDF4._netCDF4.Variable'>\nfloat32 wspeed_v(time, latitude, longitude)\n    puv__parameter: http://vocab.nerc.ac.uk/collection/P01/current/ESNSMPXX/\n    coordinates: time latitude longitude\n    short_name: wspeed_v\n    aggregation: Daily\n    units: ms-1\n    long_name: northward_wind\n    _ChunkSizes: [  1 133 491]\nunlimited dimensions: time\ncurrent shape = (31, 723, 491)\nfilling off}\n```\n\n\n:::\n:::\n\n\n\n</details>\n\n\n## Extract data\n\nNow that we have an open connection to a file on the server we need to extract the daily mean temperature at\n1.5m depth for the 10th of December.\n\nFrom the `dailyAggDec22.variables` output above we can see that the variable corresponding to temperature\nis: $\\texttt{ temp(time, k, latitude, longitude)}$.\n\nThe dimensions for temperature are in brackets. This means that there is a temperature value for every\ncombination of longitude, latitude, depth (k) and time. We can now see why these NetCDF files are so large.\n\nTo extract data from the file we need to access the variable of interest using the structure\n\n`<file>.variables[<variable name>][<dimension 1 indices>, <dim. 2 indices>, ...]`\n\nHere we access the values for the given variable at certain indexes along each dimension.\n\nTherefore, we need the following:\n\n  * **file**: an eReefs NetCDF file connection; in our case `dailyAggDec22.nc`.\n  * **variable name**: the name of the data variable we wish to extract; in our case `\"temp\"`.\n  * **dimension indices**: a vector specifying for which indices of each dimension to extract the temperature\n    values.\n\nLet's look at how to construct the vector of dimension indices.\n\n**Time**: Since we have the daily aggregated data for December 2022, and are interested only in a single day\n  (the 10th), time is a constant value; i.e. we have a single index for which to extract. From the\n  `dailyAggDec22.dimensions` output we can see we have 31 time indexs, these correspond to the day of the\n  month, therefore we want the `time=10`.\n\n**Depth**: Again we have a constant value of interest (1.5 m). The index `k` corresponds to different depths\n  as shown in the table below, where we see that for the 4km models `k=16` maps to a depth of 1.5 m.\n\n<details><summary>Table of eReefs depths corresponding to index `k`</summary>\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> Index k (R) </th>\n   <th style=\"text-align:right;\"> Index k (Python) </th>\n   <th style=\"text-align:right;\"> Hydrodynamic 1km model </th>\n   <th style=\"text-align:right;\"> Hydrodynamic &amp; BioGeoChemical 4km models </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 1 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> -140.00 </td>\n   <td style=\"text-align:right;\"> -145.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 2 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> -120.00 </td>\n   <td style=\"text-align:right;\"> -120.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 3 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> -103.00 </td>\n   <td style=\"text-align:right;\"> -103.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 4 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:right;\"> -88.00 </td>\n   <td style=\"text-align:right;\"> -88.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 5 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> -73.00 </td>\n   <td style=\"text-align:right;\"> -73.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 6 </td>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> -60.00 </td>\n   <td style=\"text-align:right;\"> -60.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 7 </td>\n   <td style=\"text-align:right;\"> 6 </td>\n   <td style=\"text-align:right;\"> -49.00 </td>\n   <td style=\"text-align:right;\"> -49.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 8 </td>\n   <td style=\"text-align:right;\"> 7 </td>\n   <td style=\"text-align:right;\"> -39.50 </td>\n   <td style=\"text-align:right;\"> -39.50 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 9 </td>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:right;\"> -31.00 </td>\n   <td style=\"text-align:right;\"> -31.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 10 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n   <td style=\"text-align:right;\"> -24.00 </td>\n   <td style=\"text-align:right;\"> -23.75 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 11 </td>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;\"> -18.00 </td>\n   <td style=\"text-align:right;\"> -17.75 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 12 </td>\n   <td style=\"text-align:right;\"> 11 </td>\n   <td style=\"text-align:right;\"> -13.00 </td>\n   <td style=\"text-align:right;\"> -12.75 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 13 </td>\n   <td style=\"text-align:right;\"> 12 </td>\n   <td style=\"text-align:right;\"> -9.00 </td>\n   <td style=\"text-align:right;\"> -8.80 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 14 </td>\n   <td style=\"text-align:right;\"> 13 </td>\n   <td style=\"text-align:right;\"> -5.25 </td>\n   <td style=\"text-align:right;\"> -5.55 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 15 </td>\n   <td style=\"text-align:right;\"> 14 </td>\n   <td style=\"text-align:right;\"> -2.35 </td>\n   <td style=\"text-align:right;\"> -3.00 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 16 </td>\n   <td style=\"text-align:right;\"> 15 </td>\n   <td style=\"text-align:right;\"> -0.50 </td>\n   <td style=\"text-align:right;\"> -1.50 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;color: grey !important;\"> 17 </td>\n   <td style=\"text-align:right;\"> 16 </td>\n   <td style=\"text-align:right;\"> NA </td>\n   <td style=\"text-align:right;\"> -0.50 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n</details>\n\n\n**Longitude and latitude**: We want temperatures for every available longitude and latitude so we can plot\n  the data across the entire spatial range of the eReefs model. Therefore we want every index of latitude and\n  longitude. In python this is easily specified by using the notation `vector[:]` which can be though of as\n  short hand for `vector[<minimum index>: <maximum index>]`.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# EXTRACT DATA\ntemps_10Dec22_1p5m = dailyAggDec22_nc.variables['temp'][\n  10,  # time index --> 10th day of month\n  16,  # depth index k --> 1.5m depth\n  :,   # latitude indices --> all possible\n  :,   # longitude indices --> all possible\n]\n\nprint(repr(temps_10Dec22_1p5m))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nmasked_array(\n  data=[[      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ..., 22.950163, 22.948303,\n         22.942863],\n        [      nan,       nan,       nan, ..., 22.945545, 22.947357,\n         22.934599],\n        ...,\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan],\n        [      nan,       nan,       nan, ...,       nan,       nan,\n               nan]],\n  mask=False,\n  fill_value=1e+20,\n  dtype=float32)\n```\n\n\n:::\n:::\n\n\n\n\n\n## Plot data\n\nLet's plot the data. To do this we will need to extract the longitude and latitude variables from the open\nserver file.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlons = dailyAggDec22_nc.variables[\"longitude\"][:]\nlats = dailyAggDec22_nc.variables[\"latitude\"][:]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Setup plot canvas\nplt.figure(figsize=(12, 8), dpi=80, facecolor='w', edgecolor='k')\nax = plt.axes(projection=ccrs.PlateCarree())\nax.set_extent([135, 165, -6.5, -29.5], ccrs.PlateCarree())\n\n# Add the data to the plot\nplt.contourf(lons, lats, temps_10Dec22_1p5m, 30, transform=ccrs.PlateCarree())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<cartopy.mpl.contour.GeoContourSet object at 0x736484152160>\n```\n\n\n:::\n\n```{.python .cell-code}\n# Add landmass coastlines shapefile\nax.coastlines()\n\n# Show plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n/opt/conda/lib/python3.8/site-packages/cartopy/io/__init__.py:241: DownloadWarning: Downloading: https://naturalearth.s3.amazonaws.com/50m_physical/ne_50m_coastline.zip\n  warnings.warn(f'Downloading: {url}', DownloadWarning)\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Extracted eReefs daily aggregated mean temperature at 1.5m depth for 10 December 2022.](basic_server_access_python_files/figure-html/fig-temps-plot-1.png){#fig-temps-plot width=1152}\n:::\n:::\n\n\n\n\nHooray! We can now see in @fig-temps-plot that our data was extracted successfully.\n\n\n## Close file connection\n\nNow that we are done with the opened server file it is best practice to close it.\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndailyAggDec22_nc.close()\n```\n:::\n",
    "supporting": [
      "basic_server_access_python_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}